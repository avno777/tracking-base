openapi: 3.0.0
info:
  title: User API Documentation
  version: 1.0.0
  description: API for user authentication and management
servers:
  - url: http://localhost:6061/v1/api
# schemes:
# - https
# - http

# Authentication APIs
paths:
  /auth/register:
    post:
      tags:
        - 'Authentication'
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUser'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  email:
                    type: string
              example:
                message: 'User registered successfully'
                email: 'user@gmail.com'
        '404':
          description: Email for register is used
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: 'Email existed !!!'
        '500':
          $ref: '#/components/responses/500InternalServer'

  /auth/login:
    post:
      summary: Login a user
      tags:
        - 'Authentication'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUser'
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                      fullname:
                        type: string
                      avatarUrl:
                        type: string
                      phone:
                        type: string
                      nationCode:
                        type: string
                      address:
                        type: string
                      city:
                        type: string
                      country:
                        type: string
                      state:
                        type: string
              example:
                message: 'Login successful'
                accessToken: 'access token'
                refreshToken: 'refresh token'
                user:
                  _id: 'objectId'
                  fullname: 'Nguyen A'
                  avatarUrl: ''
                  phone: '0909090909'
                  nationCode: '+84'
                  address: 'Hanoi, Vietnam'
                  city: 'Hanoi'
                  country: 'Vietnam'
                  state: ''
        '404':
          description: Email for login is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: 'Email not found !!!'
        '402':
          description: Password is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: 'Invalid password'
        '500':
          $ref: '#/components/responses/500InternalServer'
  /auth/active:
    post:
      summary: active account
      tags:
        - 'Authentication'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                otp:
                  type: string
                email:
                  type: string
      responses:
        '200':
          description: Active account successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                      refreshToken:
                        type: string
                      user:
                        type: object
                        properties:
                          _id:
                            type: string
                          fullname:
                            type: string
                          avatarUrl:
                            type: string
                          phone:
                            type: string
                          nationCode:
                            type: string
                          address:
                            type: string
                          city:
                            type: string
                          country:
                            type: string
                          state:
                            type: string
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServer'
  /auth/change-password:
    post:
      summary: Change user password
      tags:
        - 'Authentication'
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePassword'
            example:
              oldPassword: 'old password'
              newPassword: 'new password'
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: 'Password changed successfully'
        '404':
          $ref: '#/components/responses/404NotFound'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServer'
  /auth/logout:
    post:
      summary: Logout a user
      tags:
        - 'Authentication'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: 'Logout successful'
        '404':
          $ref: '#/components/responses/404NotFound'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServer'
  /auth/refresh-token:
    post:
      summary: Refresh token
      tags:
        - 'Authentication'
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
              required:
                - refreshToken
            example:
              refreshToken: 'refresh token'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  accessToken:
                    type: string
              example:
                message: 'Refresh token successfully'
                accessToken: 'new access token'
        '404':
          $ref: '#/components/responses/404NotFound'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServer'
  /auth/send-otp-forgot:
    post:
      summary: Send OTP token forgot
      tags:
        - 'Authentication'
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
                - email
            example:
              email: 'a@gmail.com'
      responses:
        '200':
          description: Send OTP successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      otp:
                        type: string
                      email:
                        type: string
              example:
                message: 'Send OTP successfully'
                data:
                  otp: '123456'
                  email: 'a@gmail.com'
  /auth/verify-otp-forGot:
    post:
      summary: Verify OTP forgot
      tags:
        - 'Authentication'
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                otp:
                  type: number
              required:
                - email
                - otp
            example:
              email: 'a@gmail.com'
              otp: 123456
      responses:
        '200':
          description: Send OTP successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: 'Send OTP successfully'
        '400':
          $ref: '#/components/responses/400BadRequest'

  /account/user-info:
    get:
      summary: Get account information
      tags:
        - User Info
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Get info of an account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
              example:
                _id: 'objectId'
                fullname: 'Nguyen A'
                email: 'test@gmail.com'
                avatarUrl: ''
                phone: '0909090909'
                nationCode: '+84'
                address: 'Hanoi, Vietnam'
                city: 'Hanoi'
                country: 'Vietnam'
                state: ''
        '404':
          $ref: '#/components/responses/404NotFound'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServer'
    put:
      summary: Update account information
      tags:
        - User Info
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInfo'
            example:
              fullname: 'Nguyen A'
              avatarUrl: ''
              phone: '0909090909'
              nationCode: '+84'
              address: 'Hanoi, Vietnam'
              city: 'Hanoi'
              country: 'Vietnam'
              state: 'Ha Dong'
      responses:
        '200':
          description: Update user information successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
              example:
                _id: ''
                fullname: 'Nguyen A'
                avatarUrl: ''
                phone: '0909090909'
                nationCode: '+84'
                address: 'Hanoi, Vietnam'
                city: 'Hanoi'
                country: 'Vietnam'
                state: 'Ha Dong'
        '404':
          $ref: '#/components/responses/404NotFound'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServer'

  # CRUD APIs
  /order:
    get:
      summary: Get list orders
      tags:
        - Order
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/limitParam'
        - in: query
          name: orderCode
          description: Search for order code.
          required: false
          schema:
            type: string
        - in: query
          name: quantity
          description: Search for quantity.
          required: false
          schema:
            type: string
        - in: query
          name: orderType
          description: Search for order type.
          required: false
          schema:
            type: string
        - in: query
          name: customerId
          description: Search for customer.
          required: false
          schema:
            type: string
        - in: query
          name: productId
          description: Search for product.
          required: false
          schema:
            type: string
        - in: query
          name: supplierId
          description: Search for supplier.
          required: false
          schema:
            type: string
        - in: query
          name: orderDate
          description: Search for order date.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A list of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
                example:
                  message: Get data successfully
                  data:
                    _id: 'objectId'
                    orderCode: '01'
                    customerId: 'customerID'
                    productId: 'productId'
                    supplierId: 'supplierID'
                    quantity: 10
                    totalAmount: 20000
                    status: 'Ordered'
                    orderType: 'home delivery'
                    orderDate: '1720927126'

        '404':
          $ref: '#/components/responses/404NotFound'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServer'
    post:
      summary: create an order
      tags:
        - Order
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
            example:
              orderCode: '01'
              customerId: 'customerID'
              productId: 'productId'
              supplierId: 'supplierID'
              quantity: 10
              totalAmount: 20000
              status: 1
              orderType: 'home delivery'
              orderDate: '1720927126'
      responses:
        '200':
          description: Create order successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
              example:
                message: Get data successfully
                data:
                  _id: 'objectId'
                  orderCode: '01'
                  customerId: 'customerID'
                  productId: 'productId'
                  supplierId: 'supplierID'
                  quantity: 10
                  totalAmount: 20000
                  status: 'Ordered'
                  orderType: 'home delivery'
                  orderDate: '1720927126'
        '404':
          $ref: '#/components/responses/404NotFound'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServer'
  /order/{id}:
    get:
      summary: Get order by ID
      tags:
        - Order
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          $ref: '#/components/responses/404NotFound'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServer'
    put:
      summary: Update order by ID
      tags:
        - Order
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
            example:
              message: Get data successfully
              data:
                _id: 'objectId'
                orderCode: '01'
                customerId: 'customerID'
                productId: 'productId'
                supplierId: 'supplierID'
                quantity: 10
                totalAmount: 20000
                status: 'Ordered'
                orderType: 'home delivery'
                orderDate: '1720927126'
      responses:
        '200':
          description: Get data successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Order'
              example:
                message: Get data successfully
                data:
                  _id: 'objectId'
                  orderCode: '01'
                  customerId: 'customerID'
                  productId: 'productId'
                  supplierId: 'supplierID'
                  quantity: 10
                  totalAmount: 20000
                  status: 'Ordered'
                  orderType: 'home delivery'
                  orderDate: '1720927126'
        '404':
          $ref: '#/components/responses/404NotFound'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServer'
    delete:
      summary: Delete order by ID
      tags:
        - Order
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          $ref: '#/components/responses/204DeleteSuccessfully'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServer'
  #Customer
  /customer:
    get:
      summary: Get list customers
      tags:
        - Customer
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/limitParam'
        - in: query
          name: orderCode
          description: Search for order code.
          required: false
          schema:
            type: string
        - in: query
          name: quantity
          description: Search for quantity.
          required: false
          schema:
            type: string
        - in: query
          name: orderType
          description: Search for order type.
          required: false
          schema:
            type: string
        - in: query
          name: customerId
          description: Search for customer.
          required: false
          schema:
            type: string
        - in: query
          name: productId
          description: Search for product.
          required: false
          schema:
            type: string
        - in: query
          name: supplierId
          description: Search for supplier.
          required: false
          schema:
            type: string
        - in: query
          name: orderDate
          description: Search for order date.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A list of customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
                example:
                  message: Get data successfully
                  data:
                    _id: 'objectId'
                    orderCode: '01'
                    customerId: 'customerID'
                    productId: 'productId'
                    supplierId: 'supplierID'
                    quantity: 10
                    totalAmount: 20000
                    status: 'Ordered'
                    orderType: 'home delivery'
                    orderDate: '1720927126'

        '404':
          $ref: '#/components/responses/404NotFound'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServer'
    post:
      summary: create an customer
      tags:
        - Customer
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
            example:
              orderCode: '01'
              customerId: 'customerID'
              productId: 'productId'
              supplierId: 'supplierID'
              quantity: 10
              totalAmount: 20000
              status: 1
              orderType: 'home delivery'
              orderDate: '1720927126'
      responses:
        '200':
          description: Create order successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
              example:
                message: Get data successfully
                data:
                  _id: 'objectId'
                  orderCode: '01'
                  customerId: 'customerID'
                  productId: 'productId'
                  supplierId: 'supplierID'
                  quantity: 10
                  totalAmount: 20000
                  status: 'Ordered'
                  orderType: 'home delivery'
                  orderDate: '1720927126'
        '404':
          $ref: '#/components/responses/404NotFound'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServer'
  /customer/{id}:
    get:
      summary: Get customer by ID
      tags:
        - Customer
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          $ref: '#/components/responses/404NotFound'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServer'
    put:
      summary: Update customer by ID
      tags:
        - Customer
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
            example:
              message: Get data successfully
              data:
                _id: 'objectId'
                orderCode: '01'
                customerId: 'customerID'
                productId: 'productId'
                supplierId: 'supplierID'
                quantity: 10
                totalAmount: 20000
                status: 'Ordered'
                orderType: 'home delivery'
                orderDate: '1720927126'
      responses:
        '200':
          description: Get data successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Order'
              example:
                message: Get data successfully
                data:
                  _id: 'objectId'
                  orderCode: '01'
                  customerId: 'customerID'
                  productId: 'productId'
                  supplierId: 'supplierID'
                  quantity: 10
                  totalAmount: 20000
                  status: 'Ordered'
                  orderType: 'home delivery'
                  orderDate: '1720927126'
        '404':
          $ref: '#/components/responses/404NotFound'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServer'
    delete:
      summary: Delete customer by ID
      tags:
        - Customer
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          $ref: '#/components/responses/204DeleteSuccessfully'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServer'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ResponseMessage:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    # User schema
    User:
      type: object
      properties:
        _id:
          type: string
        fullname:
          type: string
        email:
          type: string
        password:
          type: string
        avatarUrl:
          type: string
        role:
          type: string
          enum:
            - customer
            - admin
            - supervisor
        refreshToken:
          type: string
        phone:
          type: string
        nationCode:
          type: string
        address:
          type: string
        city:
          type: string
        country:
          type: string
        state:
          type: string

    # RegisterUser schema
    RegisterUser:
      type: object
      properties:
        fullname:
          type: string
        email:
          type: string
        password:
          type: string
    # LoginUser schema
    LoginUser:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    # ChangePassword schema
    ChangePassword:
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
    accountData:
      type: object
      properties:
        _id:
          type: string
        fullname:
          type: string
        phone:
          type: string
        nationCode:
          type: string
        address:
          type: string
        city:
          type: string
        country:
          type: string
        state:
          type: string
    # UpdateUser schema
    UpdateUser:
      type: object
      properties:
        fullname:
          type: string
        email:
          type: string
        avatarUrl:
          type: string
        role:
          type: string
          enum:
            - customer
            - admin
            - supervisor
        phone:
          type: string
        nationCode:
          type: string
        address:
          type: string
        city:
          type: string
        country:
          type: string
        state:
          type: string
    UserInfo:
      properties:
        _id:
          type: string
        fullname:
          type: string
        email:
          type: string
        avatarUrl:
          type: string
        phone:
          type: string
        nationCode:
          type: string
        address:
          type: string
        city:
          type: string
        country:
          type: string
        state:
          type: string
    #Order schema
    Order:
      type: object
      properties:
        _id:
          type: string
        orderCode:
          type: string
        customerId:
          type: string
        productId:
          type: string
        supplierId:
          type: string
        quantity:
          type: number
        totalAmount:
          type: number
        status:
          type: string
        orderType:
          type: string
        orderDate:
          type: string
    #Order location
    OrderLocation:
      type: object
      properties:
        _id:
          type: string
        staus:
          type: string
        location:
          type: string
        trackingTime:
          type: string
    customer:
      type: object
      properties:
        _id:
          type: string
        fullname:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        address:
          type: string
        company:
          type: string
        status:
          type: string

  parameters:
    pageParam: # Can be referenced via '#/components/parameters/offsetParam'
      name: page
      in: query
      description: Number of page to skip before returning the results.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 0
    limitParam: # Can be referenced as '#/components/parameters/limitParam'
      name: limit
      in: query
      description: Maximum number of items to return.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
        default: 10
    startDateParam:
      name: startDate
      in: query
      description: from this time
      required: false
      schema:
        type: string
    endDateParam:
      name: endDate
      in: query
      description: to this time
      required: false
      schema:
        type: string

  responses:
    200Successful:
      description: The request successful.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseMessage'
          example:
            message: 'Successful !!!'
    204DeleteSuccessfully:
      description: Delete data successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseMessage'
          example:
            message: 'Delete Successfully !!!'
    400BadRequest:
      description: The request is invalid from the client.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseMessage'
          example:
            message: '400 Bad request !!!'
    404NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseMessage'
          example:
            message: '404 Not found !!!'
    401Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseMessage'
          example:
            message: 'Unauthorized !!!'
    403Forbidden:
      description: User don’t have permission to access this resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseMessage'
          example:
            message: 'Forbidden !!!'
    500InternalServer:
      description: An internal server error occurred.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseMessage'
          example:
            message: '500 Internal server error !!!'
    503ServiceUnavailable:
      description: The server cannot handle the request temporarily.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseMessage'
          example:
            message: '503 Service unavailable !!!'
